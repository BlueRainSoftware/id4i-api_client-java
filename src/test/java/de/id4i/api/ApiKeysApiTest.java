/*
 * ID4i API
 * HTTP API Documentation for ID4i
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.id4i.api;

import de.id4i.ApiException;
import de.id4i.api.model.AddApiKeyPrivilegeRequest;
import de.id4i.api.model.ApiError;
import de.id4i.api.model.ApiKeyChangeRequest;
import de.id4i.api.model.ApiKeyCreationRequest;
import de.id4i.api.model.ApiKeyPresentation;
import de.id4i.api.model.ApiKeyPrivilegeInfoResponse;
import de.id4i.api.model.ApiKeyPrivilegePaginatedResponse;
import de.id4i.api.model.Id4nPresentationPaginatedResponse;
import de.id4i.api.model.ListOfId4ns;
import de.id4i.api.model.PaginatedApiKeyResponse;
import de.id4i.api.model.RemoveApiKeyPrivilegeRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiKeysApi
 */
@Ignore
public class ApiKeysApiTest {

    private final ApiKeysApi api = new ApiKeysApi();

    
    /**
     * Add privilege
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addApiKeyPrivilegeTest() throws ApiException {
        String key = null;
        AddApiKeyPrivilegeRequest addApiKeyPrivilegeRequest = null;
        String authorization = null;
        String acceptLanguage = null;
        ApiError response = api.addApiKeyPrivilege(key, addApiKeyPrivilegeRequest, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Add ID4ns of a privilege
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addApiKeyPrivilegeForId4nsTest() throws ApiException {
        String key = null;
        String privilege = null;
        ListOfId4ns id4ns = null;
        String authorization = null;
        String acceptLanguage = null;
        ApiError response = api.addApiKeyPrivilegeForId4ns(key, privilege, id4ns, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Create API key
     *
     * Creation of a new API key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNewApiKeyTest() throws ApiException {
        ApiKeyCreationRequest creationRequest = null;
        String authorization = null;
        String acceptLanguage = null;
        ApiKeyPresentation response = api.createNewApiKey(creationRequest, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Delete API key
     *
     * Deletion of an API key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteApiKeyTest() throws ApiException {
        String key = null;
        String authorization = null;
        String acceptLanguage = null;
        ApiError response = api.deleteApiKey(key, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Show API key
     *
     * Showing the details of an API key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApiKeyTest() throws ApiException {
        String key = null;
        String authorization = null;
        String acceptLanguage = null;
        ApiKeyPresentation response = api.getApiKey(key, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * List all privileges
     *
     * Listing all possible API key privileges.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAllApiKeyPrivilegesTest() throws ApiException {
        String authorization = null;
        String acceptLanguage = null;
        Boolean id4nConcerning = null;
        Integer offset = null;
        Integer limit = null;
        ApiKeyPrivilegeInfoResponse response = api.listAllApiKeyPrivileges(authorization, acceptLanguage, id4nConcerning, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Find API key by organization
     *
     * Finding all API key assigned to the specified organization in a paginated manner.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAllApiKeysOfOrganizationTest() throws ApiException {
        Long organizationId = null;
        String authorization = null;
        String acceptLanguage = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedApiKeyResponse response = api.listAllApiKeysOfOrganization(organizationId, authorization, acceptLanguage, offset, limit);

        // TODO: test validations
    }
    
    /**
     * List privileges
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listApiKeyPrivilegesTest() throws ApiException {
        String key = null;
        String authorization = null;
        String acceptLanguage = null;
        Integer offset = null;
        Integer limit = null;
        ApiKeyPrivilegePaginatedResponse response = api.listApiKeyPrivileges(key, authorization, acceptLanguage, offset, limit);

        // TODO: test validations
    }
    
    /**
     * ID4ns of a privilege
     *
     * Listing ID4ns of a id4n concerning privilege
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listId4nsTest() throws ApiException {
        String key = null;
        String privilege = null;
        String authorization = null;
        String acceptLanguage = null;
        Integer offset = null;
        Integer limit = null;
        Id4nPresentationPaginatedResponse response = api.listId4ns(key, privilege, authorization, acceptLanguage, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Remove privilege
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeApiKeyPrivilegeTest() throws ApiException {
        String key = null;
        RemoveApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest = null;
        String authorization = null;
        String acceptLanguage = null;
        ApiError response = api.removeApiKeyPrivilege(key, removeApiKeyPrivilegeRequest, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Remove id4ns of a privilege
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeApiKeyPrivilegeForId4nsTest() throws ApiException {
        String key = null;
        String privilege = null;
        ListOfId4ns id4ns = null;
        String authorization = null;
        String acceptLanguage = null;
        ApiError response = api.removeApiKeyPrivilegeForId4ns(key, privilege, id4ns, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Update API keys
     *
     * API keys can be updated with new labels, and be activated and deactivated. The secret or UUID cannot be changed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateApiKeyTest() throws ApiException {
        String key = null;
        ApiKeyChangeRequest apiKeyChange = null;
        String authorization = null;
        String acceptLanguage = null;
        ApiError response = api.updateApiKey(key, apiKeyChange, authorization, acceptLanguage);

        // TODO: test validations
    }
    
}
