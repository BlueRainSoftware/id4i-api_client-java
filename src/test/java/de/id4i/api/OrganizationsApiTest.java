/*
 * ID4i API
 * HTTP API Documentation for ID4i
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.id4i.api;

import de.id4i.ApiException;
import de.id4i.api.model.ApiError;
import de.id4i.api.model.ChangeRoleRequest;
import java.io.File;
import de.id4i.api.model.Organization;
import de.id4i.api.model.OrganizationAddress;
import de.id4i.api.model.OrganizationUserInvitationListRequest;
import de.id4i.api.model.PaginatedCountryResponse;
import de.id4i.api.model.PaginatedGuidCollection;
import de.id4i.api.model.PaginatedOrganizationResponse;
import de.id4i.api.model.PaginatedStringResponse;
import de.id4i.api.model.PaginatedUserPresentationResponse;
import de.id4i.api.model.PaginatedUserRolesResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganizationsApi
 */
@Ignore
public class OrganizationsApiTest {

    private final OrganizationsApi api = new OrganizationsApi();

    
    /**
     * Add role(s) to user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addUserRolesTest() throws ApiException {
        Long organizationId = null;
        String username = null;
        ChangeRoleRequest changeRoleRequest = null;
        String authorization = null;
        String acceptLanguage = null;
        ApiError response = api.addUserRoles(organizationId, username, changeRoleRequest, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Create organization
     *
     * Creating a new organization.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrganizationTest() throws ApiException {
        Organization organization = null;
        String authorization = null;
        String acceptLanguage = null;
        Organization response = api.createOrganization(organization, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Delete organization
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOrganizationTest() throws ApiException {
        Long organizationId = null;
        String authorization = null;
        String acceptLanguage = null;
        ApiError response = api.deleteOrganization(organizationId, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Remove billing address
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOrganizationBillingAddressTest() throws ApiException {
        Long organizationId = null;
        String authorization = null;
        String acceptLanguage = null;
        ApiError response = api.deleteOrganizationBillingAddress(organizationId, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Delete organization logo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOrganizationLogoTest() throws ApiException {
        Long organizationId = null;
        String authorization = null;
        String acceptLanguage = null;
        ApiError response = api.deleteOrganizationLogo(organizationId, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Find organization by id
     *
     * Returns a single organization.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findOrganizationTest() throws ApiException {
        Long organizationId = null;
        String authorization = null;
        String acceptLanguage = null;
        Organization response = api.findOrganization(organizationId, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Retrieve address
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findOrganizationAddressTest() throws ApiException {
        Long organizationId = null;
        String authorization = null;
        String acceptLanguage = null;
        OrganizationAddress response = api.findOrganizationAddress(organizationId, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Retrieve billing address
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findOrganizationBillingAddressTest() throws ApiException {
        Long organizationId = null;
        String authorization = null;
        String acceptLanguage = null;
        OrganizationAddress response = api.findOrganizationBillingAddress(organizationId, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Get collections of organization
     *
     * Retrieving all collections of an organization in a paginated manner.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllCollectionsOfOrganizationTest() throws ApiException {
        Long organizationId = null;
        String authorization = null;
        String acceptLanguage = null;
        Integer offset = null;
        Integer limit = null;
        String type = null;
        String label = null;
        String labelPrefix = null;
        PaginatedGuidCollection response = api.getAllCollectionsOfOrganization(organizationId, authorization, acceptLanguage, offset, limit, type, label, labelPrefix);

        // TODO: test validations
    }
    
    /**
     * List users and their roles
     *
     * Listing users and their roles in a paginated manner.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllOrganizationRolesTest() throws ApiException {
        Long organizationId = null;
        String authorization = null;
        String acceptLanguage = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedUserRolesResponse response = api.getAllOrganizationRoles(organizationId, authorization, acceptLanguage, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Retrieve organizations of user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrganizationsOfUserTest() throws ApiException {
        String authorization = null;
        String acceptLanguage = null;
        String role = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedOrganizationResponse response = api.getOrganizationsOfUser(authorization, acceptLanguage, role, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Get user roles by username
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserRolesTest() throws ApiException {
        Long organizationId = null;
        String username = null;
        String authorization = null;
        String acceptLanguage = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedStringResponse response = api.getUserRoles(organizationId, username, authorization, acceptLanguage, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Find users in organization
     *
     * Finding users in the specified organization in a paginated manner.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersOfOrganizationTest() throws ApiException {
        Long organizationId = null;
        String authorization = null;
        String acceptLanguage = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedUserPresentationResponse response = api.getUsersOfOrganization(organizationId, authorization, acceptLanguage, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Invite Users
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void inviteUsersTest() throws ApiException {
        Long organizationId = null;
        OrganizationUserInvitationListRequest invitationList = null;
        String authorization = null;
        String acceptLanguage = null;
        ApiError response = api.inviteUsers(organizationId, invitationList, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * List countries
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCountriesTest() throws ApiException {
        String authorization = null;
        String acceptLanguage = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedCountryResponse response = api.listCountries(authorization, acceptLanguage, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Remove role(s) from user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeUserRolesTest() throws ApiException {
        Long organizationId = null;
        String username = null;
        ChangeRoleRequest changeRoleRequest = null;
        String authorization = null;
        String acceptLanguage = null;
        ApiError response = api.removeUserRoles(organizationId, username, changeRoleRequest, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Update organization
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrganizationTest() throws ApiException {
        Long organizationId = null;
        Organization organization = null;
        String authorization = null;
        String acceptLanguage = null;
        Organization response = api.updateOrganization(organizationId, organization, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Store address
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrganizationAddressTest() throws ApiException {
        Long organizationId = null;
        OrganizationAddress addressResource = null;
        String authorization = null;
        String acceptLanguage = null;
        OrganizationAddress response = api.updateOrganizationAddress(organizationId, addressResource, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Store billing address
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrganizationBillingAddressTest() throws ApiException {
        Long organizationId = null;
        OrganizationAddress addressResource = null;
        String authorization = null;
        String acceptLanguage = null;
        OrganizationAddress response = api.updateOrganizationBillingAddress(organizationId, addressResource, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Update organization logo
     *
     * Updating an organization logo using a multipart file upload.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrganizationLogoTest() throws ApiException {
        Long organizationId = null;
        File file = null;
        String authorization = null;
        String acceptLanguage = null;
        ApiError response = api.updateOrganizationLogo(organizationId, file, authorization, acceptLanguage);

        // TODO: test validations
    }
    
}
