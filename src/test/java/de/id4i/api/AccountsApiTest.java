/*
 * ID4i API
 * HTTP API Documentation for ID4i
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.id4i.api;

import de.id4i.ApiException;
import de.id4i.api.model.AccountCredentials;
import de.id4i.api.model.ApiError;
import de.id4i.api.model.ChangeRoleRequest;
import de.id4i.api.model.PaginatedOrganizationResponse;
import de.id4i.api.model.PaginatedStringResponse;
import de.id4i.api.model.PaginatedUserPresentationResponse;
import de.id4i.api.model.PaginatedUserRolesResponse;
import de.id4i.api.model.PasswordResetRequest;
import de.id4i.api.model.PasswordResetVerificationRequest;
import de.id4i.api.model.RegistrationVerificationTokenPresentation;
import de.id4i.api.model.RoleResponse;
import de.id4i.api.model.SimpleMessageResponse;
import de.id4i.api.model.UserPresentation;
import de.id4i.api.model.UserRegistrationRequest;
import de.id4i.api.model.UserRegistrationResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Ignore
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    
    /**
     * Find by username
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findUserByUsernameTest() throws ApiException {
        String username = null;
        String authorization = null;
        String acceptLanguage = null;
        UserPresentation response = api.findUserByUsername(username, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * List users and their roles
     *
     * Listing users and their roles in a paginated manner.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllOrganizationRolesTest() throws ApiException {
        Long organizationId = null;
        String authorization = null;
        String acceptLanguage = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedUserRolesResponse response = api.getAllOrganizationRoles(organizationId, authorization, acceptLanguage, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Retrieve organizations of user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrganizationsOfUserTest() throws ApiException {
        String authorization = null;
        String acceptLanguage = null;
        String role = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedOrganizationResponse response = api.getOrganizationsOfUser(authorization, acceptLanguage, role, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Get user roles by username
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserRolesTest() throws ApiException {
        Long organizationId = null;
        String username = null;
        String authorization = null;
        String acceptLanguage = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedStringResponse response = api.getUserRoles(organizationId, username, authorization, acceptLanguage, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Find users in organization
     *
     * Finding users in the specified organization in a paginated manner.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersOfOrganizationTest() throws ApiException {
        Long organizationId = null;
        String authorization = null;
        String acceptLanguage = null;
        Integer offset = null;
        Integer limit = null;
        PaginatedUserPresentationResponse response = api.getUsersOfOrganization(organizationId, authorization, acceptLanguage, offset, limit);

        // TODO: test validations
    }
    
    /**
     * List roles
     *
     * Listing of roles.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAllRolesTest() throws ApiException {
        String authorization = null;
        String acceptLanguage = null;
        String privilege = null;
        Integer offset = null;
        Integer limit = null;
        RoleResponse response = api.listAllRoles(authorization, acceptLanguage, privilege, offset, limit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * ID4i API Login
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginTest() throws ApiException {
        AccountCredentials accountCredentials = null;
        api.login(accountCredentials);

        // TODO: test validations
    }
    
    /**
     * Register user
     *
     * Registering a new user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerUserTest() throws ApiException {
        UserRegistrationRequest userRegistration = null;
        String authorization = null;
        String acceptLanguage = null;
        UserRegistrationResponse response = api.registerUser(userRegistration, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Remove role(s) from user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeUserRolesTest() throws ApiException {
        Long organizationId = null;
        String username = null;
        ChangeRoleRequest changeRoleRequest = null;
        String authorization = null;
        String acceptLanguage = null;
        ApiError response = api.removeUserRoles(organizationId, username, changeRoleRequest, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Request password reset
     *
     * Requesting a reset for a new password. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestPasswordResetTest() throws ApiException {
        PasswordResetRequest resetRequest = null;
        String authorization = null;
        String acceptLanguage = null;
        SimpleMessageResponse response = api.requestPasswordReset(resetRequest, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Add role(s) to user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserRolesTest() throws ApiException {
        Long organizationId = null;
        String username = null;
        ChangeRoleRequest changeRoleRequest = null;
        String authorization = null;
        String acceptLanguage = null;
        ApiError response = api.updateUserRoles(organizationId, username, changeRoleRequest, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Verify password reset
     *
     * Setting a new password and verifying the request to set the password.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyPasswordResetTest() throws ApiException {
        PasswordResetVerificationRequest verificationRequest = null;
        String authorization = null;
        String acceptLanguage = null;
        SimpleMessageResponse response = api.verifyPasswordReset(verificationRequest, authorization, acceptLanguage);

        // TODO: test validations
    }
    
    /**
     * Verify registration
     *
     * Verifies a new user registration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyUserRegistrationTest() throws ApiException {
        RegistrationVerificationTokenPresentation token = null;
        String authorization = null;
        String acceptLanguage = null;
        ApiError response = api.verifyUserRegistration(token, authorization, acceptLanguage);

        // TODO: test validations
    }
    
}
