/*
 * ID4i API
 * HTTP API Documentation for ID4i
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.id4i.api;

import de.id4i.ApiCallback;
import de.id4i.ApiClient;
import de.id4i.ApiException;
import de.id4i.ApiResponse;
import de.id4i.Configuration;
import de.id4i.Pair;
import de.id4i.ProgressRequestBody;
import de.id4i.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import de.id4i.api.model.AccountCredentials;
import de.id4i.api.model.ApiError;
import de.id4i.api.model.ChangeRoleRequest;
import de.id4i.api.model.CompleteUserRegistrationRequest;
import de.id4i.api.model.OrganizationUserInvitationListRequest;
import de.id4i.api.model.PaginatedOrganizationResponse;
import de.id4i.api.model.PaginatedStringResponse;
import de.id4i.api.model.PaginatedUserPresentationResponse;
import de.id4i.api.model.PaginatedUserRolesResponse;
import de.id4i.api.model.PasswordResetRequest;
import de.id4i.api.model.PasswordResetVerificationRequest;
import de.id4i.api.model.RegistrationVerificationTokenPresentation;
import de.id4i.api.model.RoleResponse;
import de.id4i.api.model.SimpleMessageResponse;
import de.id4i.api.model.UserPresentation;
import de.id4i.api.model.UserRegistrationRequest;
import de.id4i.api.model.UserRegistrationResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountsApi {
    private ApiClient apiClient;

    public AccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for completeRegistration
     * @param completeRegistration Contains the verification token, the username and the initial password. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call completeRegistrationCall(CompleteUserRegistrationRequest completeRegistration, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = completeRegistration;
        
        // create path and map variables
        String localVarPath = "/account/completeRegistration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call completeRegistrationValidateBeforeCall(CompleteUserRegistrationRequest completeRegistration, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'completeRegistration' is set
        if (completeRegistration == null) {
            throw new ApiException("Missing the required parameter 'completeRegistration' when calling completeRegistration(Async)");
        }
        
        
        com.squareup.okhttp.Call call = completeRegistrationCall(completeRegistration, authorization, acceptLanguage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Complete registration
     * Completing a registration e.g. for invited users. Finish registration with a username and a password.
     * @param completeRegistration Contains the verification token, the username and the initial password. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ApiError
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiError completeRegistration(CompleteUserRegistrationRequest completeRegistration, String authorization, String acceptLanguage) throws ApiException {
        ApiResponse<ApiError> resp = completeRegistrationWithHttpInfo(completeRegistration, authorization, acceptLanguage);
        return resp.getData();
    }

    /**
     * Complete registration
     * Completing a registration e.g. for invited users. Finish registration with a username and a password.
     * @param completeRegistration Contains the verification token, the username and the initial password. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ApiResponse&lt;ApiError&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiError> completeRegistrationWithHttpInfo(CompleteUserRegistrationRequest completeRegistration, String authorization, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = completeRegistrationValidateBeforeCall(completeRegistration, authorization, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<ApiError>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Complete registration (asynchronously)
     * Completing a registration e.g. for invited users. Finish registration with a username and a password.
     * @param completeRegistration Contains the verification token, the username and the initial password. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call completeRegistrationAsync(CompleteUserRegistrationRequest completeRegistration, String authorization, String acceptLanguage, final ApiCallback<ApiError> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = completeRegistrationValidateBeforeCall(completeRegistration, authorization, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiError>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findUserByUsername
     * @param username username (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findUserByUsernameCall(String username, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/users/{username}"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findUserByUsernameValidateBeforeCall(String username, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling findUserByUsername(Async)");
        }
        
        
        com.squareup.okhttp.Call call = findUserByUsernameCall(username, authorization, acceptLanguage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Find by username
     * 
     * @param username username (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return UserPresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserPresentation findUserByUsername(String username, String authorization, String acceptLanguage) throws ApiException {
        ApiResponse<UserPresentation> resp = findUserByUsernameWithHttpInfo(username, authorization, acceptLanguage);
        return resp.getData();
    }

    /**
     * Find by username
     * 
     * @param username username (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ApiResponse&lt;UserPresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserPresentation> findUserByUsernameWithHttpInfo(String username, String authorization, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = findUserByUsernameValidateBeforeCall(username, authorization, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<UserPresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find by username (asynchronously)
     * 
     * @param username username (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findUserByUsernameAsync(String username, String authorization, String acceptLanguage, final ApiCallback<UserPresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findUserByUsernameValidateBeforeCall(username, authorization, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserPresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findUsers
     * @param usernamePrefix Find users starting with this prefix. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findUsersCall(String usernamePrefix, String authorization, String acceptLanguage, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (usernamePrefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "usernamePrefix", usernamePrefix));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findUsersValidateBeforeCall(String usernamePrefix, String authorization, String acceptLanguage, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'usernamePrefix' is set
        if (usernamePrefix == null) {
            throw new ApiException("Missing the required parameter 'usernamePrefix' when calling findUsers(Async)");
        }
        
        
        com.squareup.okhttp.Call call = findUsersCall(usernamePrefix, authorization, acceptLanguage, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Find users
     * 
     * @param usernamePrefix Find users starting with this prefix. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @return PaginatedUserPresentationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedUserPresentationResponse findUsers(String usernamePrefix, String authorization, String acceptLanguage, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PaginatedUserPresentationResponse> resp = findUsersWithHttpInfo(usernamePrefix, authorization, acceptLanguage, offset, limit);
        return resp.getData();
    }

    /**
     * Find users
     * 
     * @param usernamePrefix Find users starting with this prefix. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @return ApiResponse&lt;PaginatedUserPresentationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedUserPresentationResponse> findUsersWithHttpInfo(String usernamePrefix, String authorization, String acceptLanguage, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = findUsersValidateBeforeCall(usernamePrefix, authorization, acceptLanguage, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<PaginatedUserPresentationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find users (asynchronously)
     * 
     * @param usernamePrefix Find users starting with this prefix. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findUsersAsync(String usernamePrefix, String authorization, String acceptLanguage, Integer offset, Integer limit, final ApiCallback<PaginatedUserPresentationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findUsersValidateBeforeCall(usernamePrefix, authorization, acceptLanguage, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedUserPresentationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllOrganizationRoles
     * @param organizationId organizationId (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllOrganizationRolesCall(Long organizationId, String authorization, String acceptLanguage, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/organizations/{organizationId}/roles"
            .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllOrganizationRolesValidateBeforeCall(Long organizationId, String authorization, String acceptLanguage, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getAllOrganizationRoles(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAllOrganizationRolesCall(organizationId, authorization, acceptLanguage, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List users and their roles
     * Listing users and their roles in a paginated manner.
     * @param organizationId organizationId (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @return PaginatedUserRolesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedUserRolesResponse getAllOrganizationRoles(Long organizationId, String authorization, String acceptLanguage, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PaginatedUserRolesResponse> resp = getAllOrganizationRolesWithHttpInfo(organizationId, authorization, acceptLanguage, offset, limit);
        return resp.getData();
    }

    /**
     * List users and their roles
     * Listing users and their roles in a paginated manner.
     * @param organizationId organizationId (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @return ApiResponse&lt;PaginatedUserRolesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedUserRolesResponse> getAllOrganizationRolesWithHttpInfo(Long organizationId, String authorization, String acceptLanguage, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getAllOrganizationRolesValidateBeforeCall(organizationId, authorization, acceptLanguage, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<PaginatedUserRolesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List users and their roles (asynchronously)
     * Listing users and their roles in a paginated manner.
     * @param organizationId organizationId (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllOrganizationRolesAsync(Long organizationId, String authorization, String acceptLanguage, Integer offset, Integer limit, final ApiCallback<PaginatedUserRolesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllOrganizationRolesValidateBeforeCall(organizationId, authorization, acceptLanguage, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedUserRolesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrganizationsOfUser
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param role role (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrganizationsOfUserCall(String authorization, String acceptLanguage, String role, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/user/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (role != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "role", role));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrganizationsOfUserValidateBeforeCall(String authorization, String acceptLanguage, String role, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getOrganizationsOfUserCall(authorization, acceptLanguage, role, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve organizations of user
     * 
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param role role (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @return PaginatedOrganizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedOrganizationResponse getOrganizationsOfUser(String authorization, String acceptLanguage, String role, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PaginatedOrganizationResponse> resp = getOrganizationsOfUserWithHttpInfo(authorization, acceptLanguage, role, offset, limit);
        return resp.getData();
    }

    /**
     * Retrieve organizations of user
     * 
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param role role (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @return ApiResponse&lt;PaginatedOrganizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedOrganizationResponse> getOrganizationsOfUserWithHttpInfo(String authorization, String acceptLanguage, String role, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getOrganizationsOfUserValidateBeforeCall(authorization, acceptLanguage, role, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<PaginatedOrganizationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve organizations of user (asynchronously)
     * 
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param role role (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrganizationsOfUserAsync(String authorization, String acceptLanguage, String role, Integer offset, Integer limit, final ApiCallback<PaginatedOrganizationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrganizationsOfUserValidateBeforeCall(authorization, acceptLanguage, role, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedOrganizationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserRoles
     * @param organizationId organizationId (required)
     * @param username username (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserRolesCall(Long organizationId, String username, String authorization, String acceptLanguage, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/organizations/{organizationId}/users/{username}/roles"
            .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserRolesValidateBeforeCall(Long organizationId, String username, String authorization, String acceptLanguage, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getUserRoles(Async)");
        }
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUserRoles(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserRolesCall(organizationId, username, authorization, acceptLanguage, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get user roles by username
     * 
     * @param organizationId organizationId (required)
     * @param username username (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @return PaginatedStringResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedStringResponse getUserRoles(Long organizationId, String username, String authorization, String acceptLanguage, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PaginatedStringResponse> resp = getUserRolesWithHttpInfo(organizationId, username, authorization, acceptLanguage, offset, limit);
        return resp.getData();
    }

    /**
     * Get user roles by username
     * 
     * @param organizationId organizationId (required)
     * @param username username (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @return ApiResponse&lt;PaginatedStringResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedStringResponse> getUserRolesWithHttpInfo(Long organizationId, String username, String authorization, String acceptLanguage, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getUserRolesValidateBeforeCall(organizationId, username, authorization, acceptLanguage, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<PaginatedStringResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get user roles by username (asynchronously)
     * 
     * @param organizationId organizationId (required)
     * @param username username (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserRolesAsync(Long organizationId, String username, String authorization, String acceptLanguage, Integer offset, Integer limit, final ApiCallback<PaginatedStringResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserRolesValidateBeforeCall(organizationId, username, authorization, acceptLanguage, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedStringResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUsersOfOrganization
     * @param organizationId organizationId (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUsersOfOrganizationCall(Long organizationId, String authorization, String acceptLanguage, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/organizations/{organizationId}/users"
            .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsersOfOrganizationValidateBeforeCall(Long organizationId, String authorization, String acceptLanguage, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getUsersOfOrganization(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUsersOfOrganizationCall(organizationId, authorization, acceptLanguage, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Find users in organization
     * Finding users in the specified organization in a paginated manner.
     * @param organizationId organizationId (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @return PaginatedUserPresentationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedUserPresentationResponse getUsersOfOrganization(Long organizationId, String authorization, String acceptLanguage, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PaginatedUserPresentationResponse> resp = getUsersOfOrganizationWithHttpInfo(organizationId, authorization, acceptLanguage, offset, limit);
        return resp.getData();
    }

    /**
     * Find users in organization
     * Finding users in the specified organization in a paginated manner.
     * @param organizationId organizationId (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @return ApiResponse&lt;PaginatedUserPresentationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedUserPresentationResponse> getUsersOfOrganizationWithHttpInfo(Long organizationId, String authorization, String acceptLanguage, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getUsersOfOrganizationValidateBeforeCall(organizationId, authorization, acceptLanguage, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<PaginatedUserPresentationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find users in organization (asynchronously)
     * Finding users in the specified organization in a paginated manner.
     * @param organizationId organizationId (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsersOfOrganizationAsync(Long organizationId, String authorization, String acceptLanguage, Integer offset, Integer limit, final ApiCallback<PaginatedUserPresentationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsersOfOrganizationValidateBeforeCall(organizationId, authorization, acceptLanguage, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedUserPresentationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for inviteUsers
     * @param organizationId organizationId (required)
     * @param invitationList invitationList (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call inviteUsersCall(Long organizationId, OrganizationUserInvitationListRequest invitationList, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = invitationList;
        
        // create path and map variables
        String localVarPath = "/api/v1/organizations/{organizationId}/users/invite"
            .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call inviteUsersValidateBeforeCall(Long organizationId, OrganizationUserInvitationListRequest invitationList, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling inviteUsers(Async)");
        }
        
        // verify the required parameter 'invitationList' is set
        if (invitationList == null) {
            throw new ApiException("Missing the required parameter 'invitationList' when calling inviteUsers(Async)");
        }
        
        
        com.squareup.okhttp.Call call = inviteUsersCall(organizationId, invitationList, authorization, acceptLanguage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Invite Users
     * 
     * @param organizationId organizationId (required)
     * @param invitationList invitationList (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ApiError
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiError inviteUsers(Long organizationId, OrganizationUserInvitationListRequest invitationList, String authorization, String acceptLanguage) throws ApiException {
        ApiResponse<ApiError> resp = inviteUsersWithHttpInfo(organizationId, invitationList, authorization, acceptLanguage);
        return resp.getData();
    }

    /**
     * Invite Users
     * 
     * @param organizationId organizationId (required)
     * @param invitationList invitationList (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ApiResponse&lt;ApiError&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiError> inviteUsersWithHttpInfo(Long organizationId, OrganizationUserInvitationListRequest invitationList, String authorization, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = inviteUsersValidateBeforeCall(organizationId, invitationList, authorization, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<ApiError>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Invite Users (asynchronously)
     * 
     * @param organizationId organizationId (required)
     * @param invitationList invitationList (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call inviteUsersAsync(Long organizationId, OrganizationUserInvitationListRequest invitationList, String authorization, String acceptLanguage, final ApiCallback<ApiError> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = inviteUsersValidateBeforeCall(organizationId, invitationList, authorization, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiError>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAllRoles
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param privilege If specified the roles will be filtered containing that privilege. (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAllRolesCall(String authorization, String acceptLanguage, String privilege, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (privilege != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "privilege", privilege));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAllRolesValidateBeforeCall(String authorization, String acceptLanguage, String privilege, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listAllRolesCall(authorization, acceptLanguage, privilege, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List roles
     * Listing of roles.
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param privilege If specified the roles will be filtered containing that privilege. (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @return RoleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RoleResponse listAllRoles(String authorization, String acceptLanguage, String privilege, Integer offset, Integer limit) throws ApiException {
        ApiResponse<RoleResponse> resp = listAllRolesWithHttpInfo(authorization, acceptLanguage, privilege, offset, limit);
        return resp.getData();
    }

    /**
     * List roles
     * Listing of roles.
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param privilege If specified the roles will be filtered containing that privilege. (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @return ApiResponse&lt;RoleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RoleResponse> listAllRolesWithHttpInfo(String authorization, String acceptLanguage, String privilege, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = listAllRolesValidateBeforeCall(authorization, acceptLanguage, privilege, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<RoleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List roles (asynchronously)
     * Listing of roles.
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param privilege If specified the roles will be filtered containing that privilege. (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAllRolesAsync(String authorization, String acceptLanguage, String privilege, Integer offset, Integer limit, final ApiCallback<RoleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAllRolesValidateBeforeCall(authorization, acceptLanguage, privilege, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RoleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for login
     * @param accountCredentials  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loginCall(AccountCredentials accountCredentials, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = accountCredentials;
        
        // create path and map variables
        String localVarPath = "/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loginValidateBeforeCall(AccountCredentials accountCredentials, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountCredentials' is set
        if (accountCredentials == null) {
            throw new ApiException("Missing the required parameter 'accountCredentials' when calling login(Async)");
        }
        
        
        com.squareup.okhttp.Call call = loginCall(accountCredentials, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * ID4i API Login
     * @param accountCredentials  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void login(AccountCredentials accountCredentials) throws ApiException {
        loginWithHttpInfo(accountCredentials);
    }

    /**
     * 
     * ID4i API Login
     * @param accountCredentials  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> loginWithHttpInfo(AccountCredentials accountCredentials) throws ApiException {
        com.squareup.okhttp.Call call = loginValidateBeforeCall(accountCredentials, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * ID4i API Login
     * @param accountCredentials  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loginAsync(AccountCredentials accountCredentials, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loginValidateBeforeCall(accountCredentials, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for registerUser
     * @param userRegistration The user information about the new created user. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerUserCall(UserRegistrationRequest userRegistration, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userRegistration;
        
        // create path and map variables
        String localVarPath = "/account/registration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerUserValidateBeforeCall(UserRegistrationRequest userRegistration, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userRegistration' is set
        if (userRegistration == null) {
            throw new ApiException("Missing the required parameter 'userRegistration' when calling registerUser(Async)");
        }
        
        
        com.squareup.okhttp.Call call = registerUserCall(userRegistration, authorization, acceptLanguage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Register user
     * Registering a new user.
     * @param userRegistration The user information about the new created user. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return UserRegistrationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserRegistrationResponse registerUser(UserRegistrationRequest userRegistration, String authorization, String acceptLanguage) throws ApiException {
        ApiResponse<UserRegistrationResponse> resp = registerUserWithHttpInfo(userRegistration, authorization, acceptLanguage);
        return resp.getData();
    }

    /**
     * Register user
     * Registering a new user.
     * @param userRegistration The user information about the new created user. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ApiResponse&lt;UserRegistrationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserRegistrationResponse> registerUserWithHttpInfo(UserRegistrationRequest userRegistration, String authorization, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = registerUserValidateBeforeCall(userRegistration, authorization, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<UserRegistrationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register user (asynchronously)
     * Registering a new user.
     * @param userRegistration The user information about the new created user. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerUserAsync(UserRegistrationRequest userRegistration, String authorization, String acceptLanguage, final ApiCallback<UserRegistrationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerUserValidateBeforeCall(userRegistration, authorization, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserRegistrationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeUserRoles
     * @param organizationId organizationId (required)
     * @param username username (required)
     * @param changeRoleRequest changeRoleRequest (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeUserRolesCall(Long organizationId, String username, ChangeRoleRequest changeRoleRequest, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = changeRoleRequest;
        
        // create path and map variables
        String localVarPath = "/api/v1/organizations/{organizationId}/users/{username}/roles"
            .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeUserRolesValidateBeforeCall(Long organizationId, String username, ChangeRoleRequest changeRoleRequest, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling removeUserRoles(Async)");
        }
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling removeUserRoles(Async)");
        }
        
        // verify the required parameter 'changeRoleRequest' is set
        if (changeRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'changeRoleRequest' when calling removeUserRoles(Async)");
        }
        
        
        com.squareup.okhttp.Call call = removeUserRolesCall(organizationId, username, changeRoleRequest, authorization, acceptLanguage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove role(s) from user
     * 
     * @param organizationId organizationId (required)
     * @param username username (required)
     * @param changeRoleRequest changeRoleRequest (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ApiError
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiError removeUserRoles(Long organizationId, String username, ChangeRoleRequest changeRoleRequest, String authorization, String acceptLanguage) throws ApiException {
        ApiResponse<ApiError> resp = removeUserRolesWithHttpInfo(organizationId, username, changeRoleRequest, authorization, acceptLanguage);
        return resp.getData();
    }

    /**
     * Remove role(s) from user
     * 
     * @param organizationId organizationId (required)
     * @param username username (required)
     * @param changeRoleRequest changeRoleRequest (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ApiResponse&lt;ApiError&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiError> removeUserRolesWithHttpInfo(Long organizationId, String username, ChangeRoleRequest changeRoleRequest, String authorization, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = removeUserRolesValidateBeforeCall(organizationId, username, changeRoleRequest, authorization, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<ApiError>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove role(s) from user (asynchronously)
     * 
     * @param organizationId organizationId (required)
     * @param username username (required)
     * @param changeRoleRequest changeRoleRequest (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeUserRolesAsync(Long organizationId, String username, ChangeRoleRequest changeRoleRequest, String authorization, String acceptLanguage, final ApiCallback<ApiError> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeUserRolesValidateBeforeCall(organizationId, username, changeRoleRequest, authorization, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiError>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for requestPasswordReset
     * @param resetRequest Contains the required information to request a new password. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call requestPasswordResetCall(PasswordResetRequest resetRequest, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resetRequest;
        
        // create path and map variables
        String localVarPath = "/account/password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call requestPasswordResetValidateBeforeCall(PasswordResetRequest resetRequest, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'resetRequest' is set
        if (resetRequest == null) {
            throw new ApiException("Missing the required parameter 'resetRequest' when calling requestPasswordReset(Async)");
        }
        
        
        com.squareup.okhttp.Call call = requestPasswordResetCall(resetRequest, authorization, acceptLanguage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Request password reset
     * Requesting a reset for a new password. 
     * @param resetRequest Contains the required information to request a new password. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return SimpleMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SimpleMessageResponse requestPasswordReset(PasswordResetRequest resetRequest, String authorization, String acceptLanguage) throws ApiException {
        ApiResponse<SimpleMessageResponse> resp = requestPasswordResetWithHttpInfo(resetRequest, authorization, acceptLanguage);
        return resp.getData();
    }

    /**
     * Request password reset
     * Requesting a reset for a new password. 
     * @param resetRequest Contains the required information to request a new password. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ApiResponse&lt;SimpleMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SimpleMessageResponse> requestPasswordResetWithHttpInfo(PasswordResetRequest resetRequest, String authorization, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = requestPasswordResetValidateBeforeCall(resetRequest, authorization, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<SimpleMessageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Request password reset (asynchronously)
     * Requesting a reset for a new password. 
     * @param resetRequest Contains the required information to request a new password. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call requestPasswordResetAsync(PasswordResetRequest resetRequest, String authorization, String acceptLanguage, final ApiCallback<SimpleMessageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = requestPasswordResetValidateBeforeCall(resetRequest, authorization, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SimpleMessageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUserRoles
     * @param organizationId organizationId (required)
     * @param username username (required)
     * @param changeRoleRequest changeRoleRequest (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserRolesCall(Long organizationId, String username, ChangeRoleRequest changeRoleRequest, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = changeRoleRequest;
        
        // create path and map variables
        String localVarPath = "/api/v1/organizations/{organizationId}/users/{username}/roles"
            .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserRolesValidateBeforeCall(Long organizationId, String username, ChangeRoleRequest changeRoleRequest, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateUserRoles(Async)");
        }
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling updateUserRoles(Async)");
        }
        
        // verify the required parameter 'changeRoleRequest' is set
        if (changeRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'changeRoleRequest' when calling updateUserRoles(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateUserRolesCall(organizationId, username, changeRoleRequest, authorization, acceptLanguage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add role(s) to user
     * 
     * @param organizationId organizationId (required)
     * @param username username (required)
     * @param changeRoleRequest changeRoleRequest (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ApiError
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiError updateUserRoles(Long organizationId, String username, ChangeRoleRequest changeRoleRequest, String authorization, String acceptLanguage) throws ApiException {
        ApiResponse<ApiError> resp = updateUserRolesWithHttpInfo(organizationId, username, changeRoleRequest, authorization, acceptLanguage);
        return resp.getData();
    }

    /**
     * Add role(s) to user
     * 
     * @param organizationId organizationId (required)
     * @param username username (required)
     * @param changeRoleRequest changeRoleRequest (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ApiResponse&lt;ApiError&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiError> updateUserRolesWithHttpInfo(Long organizationId, String username, ChangeRoleRequest changeRoleRequest, String authorization, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = updateUserRolesValidateBeforeCall(organizationId, username, changeRoleRequest, authorization, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<ApiError>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add role(s) to user (asynchronously)
     * 
     * @param organizationId organizationId (required)
     * @param username username (required)
     * @param changeRoleRequest changeRoleRequest (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserRolesAsync(Long organizationId, String username, ChangeRoleRequest changeRoleRequest, String authorization, String acceptLanguage, final ApiCallback<ApiError> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserRolesValidateBeforeCall(organizationId, username, changeRoleRequest, authorization, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiError>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for verifyPasswordReset
     * @param verificationRequest Contains the new password and the verification token to set the new password. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call verifyPasswordResetCall(PasswordResetVerificationRequest verificationRequest, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = verificationRequest;
        
        // create path and map variables
        String localVarPath = "/account/password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call verifyPasswordResetValidateBeforeCall(PasswordResetVerificationRequest verificationRequest, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'verificationRequest' is set
        if (verificationRequest == null) {
            throw new ApiException("Missing the required parameter 'verificationRequest' when calling verifyPasswordReset(Async)");
        }
        
        
        com.squareup.okhttp.Call call = verifyPasswordResetCall(verificationRequest, authorization, acceptLanguage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Verify password reset
     * Setting a new password and verifying the request to set the password.
     * @param verificationRequest Contains the new password and the verification token to set the new password. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return SimpleMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SimpleMessageResponse verifyPasswordReset(PasswordResetVerificationRequest verificationRequest, String authorization, String acceptLanguage) throws ApiException {
        ApiResponse<SimpleMessageResponse> resp = verifyPasswordResetWithHttpInfo(verificationRequest, authorization, acceptLanguage);
        return resp.getData();
    }

    /**
     * Verify password reset
     * Setting a new password and verifying the request to set the password.
     * @param verificationRequest Contains the new password and the verification token to set the new password. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ApiResponse&lt;SimpleMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SimpleMessageResponse> verifyPasswordResetWithHttpInfo(PasswordResetVerificationRequest verificationRequest, String authorization, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = verifyPasswordResetValidateBeforeCall(verificationRequest, authorization, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<SimpleMessageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verify password reset (asynchronously)
     * Setting a new password and verifying the request to set the password.
     * @param verificationRequest Contains the new password and the verification token to set the new password. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call verifyPasswordResetAsync(PasswordResetVerificationRequest verificationRequest, String authorization, String acceptLanguage, final ApiCallback<SimpleMessageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = verifyPasswordResetValidateBeforeCall(verificationRequest, authorization, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SimpleMessageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for verifyUserRegistration
     * @param token The token for user verification. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call verifyUserRegistrationCall(RegistrationVerificationTokenPresentation token, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = token;
        
        // create path and map variables
        String localVarPath = "/account/verification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call verifyUserRegistrationValidateBeforeCall(RegistrationVerificationTokenPresentation token, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling verifyUserRegistration(Async)");
        }
        
        
        com.squareup.okhttp.Call call = verifyUserRegistrationCall(token, authorization, acceptLanguage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Verify registration
     * Verifies a new user registration.
     * @param token The token for user verification. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ApiError
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiError verifyUserRegistration(RegistrationVerificationTokenPresentation token, String authorization, String acceptLanguage) throws ApiException {
        ApiResponse<ApiError> resp = verifyUserRegistrationWithHttpInfo(token, authorization, acceptLanguage);
        return resp.getData();
    }

    /**
     * Verify registration
     * Verifies a new user registration.
     * @param token The token for user verification. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ApiResponse&lt;ApiError&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiError> verifyUserRegistrationWithHttpInfo(RegistrationVerificationTokenPresentation token, String authorization, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = verifyUserRegistrationValidateBeforeCall(token, authorization, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<ApiError>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verify registration (asynchronously)
     * Verifies a new user registration.
     * @param token The token for user verification. (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call verifyUserRegistrationAsync(RegistrationVerificationTokenPresentation token, String authorization, String acceptLanguage, final ApiCallback<ApiError> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = verifyUserRegistrationValidateBeforeCall(token, authorization, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiError>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
