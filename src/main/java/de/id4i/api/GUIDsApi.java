/*
 * ID4i API
 * HTTP API Documentation for ID4i
 *
 * OpenAPI spec version: 0.0.1-alpha
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.id4i.api;

import de.id4i.ApiCallback;
import de.id4i.ApiClient;
import de.id4i.ApiException;
import de.id4i.ApiResponse;
import de.id4i.Configuration;
import de.id4i.Pair;
import de.id4i.ProgressRequestBody;
import de.id4i.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import de.id4i.api.model.ApiError;
import de.id4i.api.model.CreateGuidRequest;
import de.id4i.api.model.Guid;
import de.id4i.api.model.ListOfId4ns;
import de.id4i.api.model.PaginatedResponseGuid;
import de.id4i.api.model.ResponseEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GUIDsApi {
    private ApiClient apiClient;

    public GUIDsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GUIDsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createGuid
     * @param createGUIDInfo createGUIDInfo (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGuidCall(CreateGuidRequest createGUIDInfo, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createGUIDInfo;
        
        // create path and map variables
        String localVarPath = "/api/v1/guids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGuidValidateBeforeCall(CreateGuidRequest createGUIDInfo, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createGUIDInfo' is set
        if (createGUIDInfo == null) {
            throw new ApiException("Missing the required parameter 'createGUIDInfo' when calling createGuid(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createGuidCall(createGUIDInfo, authorization, acceptLanguage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create GUID(s)
     * Creating one or more GUIDs with a specified length.
     * @param createGUIDInfo createGUIDInfo (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ListOfId4ns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListOfId4ns createGuid(CreateGuidRequest createGUIDInfo, String authorization, String acceptLanguage) throws ApiException {
        ApiResponse<ListOfId4ns> resp = createGuidWithHttpInfo(createGUIDInfo, authorization, acceptLanguage);
        return resp.getData();
    }

    /**
     * Create GUID(s)
     * Creating one or more GUIDs with a specified length.
     * @param createGUIDInfo createGUIDInfo (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ApiResponse&lt;ListOfId4ns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListOfId4ns> createGuidWithHttpInfo(CreateGuidRequest createGUIDInfo, String authorization, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = createGuidValidateBeforeCall(createGUIDInfo, authorization, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<ListOfId4ns>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create GUID(s) (asynchronously)
     * Creating one or more GUIDs with a specified length.
     * @param createGUIDInfo createGUIDInfo (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGuidAsync(CreateGuidRequest createGUIDInfo, String authorization, String acceptLanguage, final ApiCallback<ListOfId4ns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGuidValidateBeforeCall(createGUIDInfo, authorization, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListOfId4ns>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGuid
     * @param id4n The GUID number (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGuidCall(String id4n, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/guids/{id4n}"
            .replaceAll("\\{" + "id4n" + "\\}", apiClient.escapeString(id4n.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGuidValidateBeforeCall(String id4n, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id4n' is set
        if (id4n == null) {
            throw new ApiException("Missing the required parameter 'id4n' when calling getGuid(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getGuidCall(id4n, authorization, acceptLanguage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve GUID information
     * 
     * @param id4n The GUID number (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return Guid
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Guid getGuid(String id4n, String authorization, String acceptLanguage) throws ApiException {
        ApiResponse<Guid> resp = getGuidWithHttpInfo(id4n, authorization, acceptLanguage);
        return resp.getData();
    }

    /**
     * Retrieve GUID information
     * 
     * @param id4n The GUID number (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ApiResponse&lt;Guid&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Guid> getGuidWithHttpInfo(String id4n, String authorization, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = getGuidValidateBeforeCall(id4n, authorization, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<Guid>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve GUID information (asynchronously)
     * 
     * @param id4n The GUID number (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGuidAsync(String id4n, String authorization, String acceptLanguage, final ApiCallback<Guid> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGuidValidateBeforeCall(id4n, authorization, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Guid>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGuidsWithoutCollection
     * @param organizationId Organization to search GUIDs for (required). (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGuidsWithoutCollectionCall(Long organizationId, String authorization, String acceptLanguage, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/guids/withoutCollection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organizationId", organizationId));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGuidsWithoutCollectionValidateBeforeCall(Long organizationId, String authorization, String acceptLanguage, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getGuidsWithoutCollection(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getGuidsWithoutCollectionCall(organizationId, authorization, acceptLanguage, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve GUIDs not in any collection
     * 
     * @param organizationId Organization to search GUIDs for (required). (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @return PaginatedResponseGuid
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedResponseGuid getGuidsWithoutCollection(Long organizationId, String authorization, String acceptLanguage, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PaginatedResponseGuid> resp = getGuidsWithoutCollectionWithHttpInfo(organizationId, authorization, acceptLanguage, offset, limit);
        return resp.getData();
    }

    /**
     * Retrieve GUIDs not in any collection
     * 
     * @param organizationId Organization to search GUIDs for (required). (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @return ApiResponse&lt;PaginatedResponseGuid&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedResponseGuid> getGuidsWithoutCollectionWithHttpInfo(Long organizationId, String authorization, String acceptLanguage, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getGuidsWithoutCollectionValidateBeforeCall(organizationId, authorization, acceptLanguage, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<PaginatedResponseGuid>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve GUIDs not in any collection (asynchronously)
     * 
     * @param organizationId Organization to search GUIDs for (required). (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param offset Start with the n-th element.  (optional)
     * @param limit The maximum count of returned elements. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGuidsWithoutCollectionAsync(Long organizationId, String authorization, String acceptLanguage, Integer offset, Integer limit, final ApiCallback<PaginatedResponseGuid> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGuidsWithoutCollectionValidateBeforeCall(organizationId, authorization, acceptLanguage, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedResponseGuid>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateGuid
     * @param id4n The GUID number (required)
     * @param request request (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateGuidCall(String id4n, Guid request, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/api/v1/guids/{id4n}"
            .replaceAll("\\{" + "id4n" + "\\}", apiClient.escapeString(id4n.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateGuidValidateBeforeCall(String id4n, Guid request, String authorization, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id4n' is set
        if (id4n == null) {
            throw new ApiException("Missing the required parameter 'id4n' when calling updateGuid(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling updateGuid(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateGuidCall(id4n, request, authorization, acceptLanguage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change GUID information.
     * Allows ownership transfer.
     * @param id4n The GUID number (required)
     * @param request request (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ResponseEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseEntity updateGuid(String id4n, Guid request, String authorization, String acceptLanguage) throws ApiException {
        ApiResponse<ResponseEntity> resp = updateGuidWithHttpInfo(id4n, request, authorization, acceptLanguage);
        return resp.getData();
    }

    /**
     * Change GUID information.
     * Allows ownership transfer.
     * @param id4n The GUID number (required)
     * @param request request (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @return ApiResponse&lt;ResponseEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseEntity> updateGuidWithHttpInfo(String id4n, Guid request, String authorization, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = updateGuidValidateBeforeCall(id4n, request, authorization, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<ResponseEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change GUID information. (asynchronously)
     * Allows ownership transfer.
     * @param id4n The GUID number (required)
     * @param request request (required)
     * @param authorization Authorization JWT Bearer Token as returned from /login (optional)
     * @param acceptLanguage Requested language (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateGuidAsync(String id4n, Guid request, String authorization, String acceptLanguage, final ApiCallback<ResponseEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateGuidValidateBeforeCall(id4n, request, authorization, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
