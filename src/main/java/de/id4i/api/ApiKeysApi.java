/*
 * ID4i API
 * ID4i HTTP API
 *
 * OpenAPI spec version: 0.9.5-SNAPSHOT
 * Contact: info@bluerain.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.id4i.api;

import de.id4i.ApiCallback;
import de.id4i.ApiClient;
import de.id4i.ApiException;
import de.id4i.ApiResponse;
import de.id4i.Configuration;
import de.id4i.Pair;
import de.id4i.ProgressRequestBody;
import de.id4i.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import de.id4i.api.model.AddApiKeyPrivilegeRequest;
import de.id4i.api.model.ApiError;
import de.id4i.api.model.ApiKeyChangeRequest;
import de.id4i.api.model.ApiKeyCreationRequest;
import de.id4i.api.model.ApiKeyPresentation;
import de.id4i.api.model.ApiKeyPrivilegeInfoResponse;
import de.id4i.api.model.ApiKeyPrivilegePaginatedResponse;
import de.id4i.api.model.Id4nPresentationPaginatedResponse;
import de.id4i.api.model.ListOfId4ns;
import de.id4i.api.model.PaginatedApiKeyResponse;
import de.id4i.api.model.RemoveApiKeyPrivilegeRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiKeysApi {
    private ApiClient apiClient;

    public ApiKeysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiKeysApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addApiKeyPrivilege
     * @param addApiKeyPrivilegeRequest addApiKeyPrivilegeRequest (required)
     * @param key key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addApiKeyPrivilegeCall(AddApiKeyPrivilegeRequest addApiKeyPrivilegeRequest, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addApiKeyPrivilegeRequest;

        // create path and map variables
        String localVarPath = "/api/v1/apikeys/{key}/privileges"
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addApiKeyPrivilegeValidateBeforeCall(AddApiKeyPrivilegeRequest addApiKeyPrivilegeRequest, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addApiKeyPrivilegeRequest' is set
        if (addApiKeyPrivilegeRequest == null) {
            throw new ApiException("Missing the required parameter 'addApiKeyPrivilegeRequest' when calling addApiKeyPrivilege(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addApiKeyPrivilege(Async)");
        }
        

        com.squareup.okhttp.Call call = addApiKeyPrivilegeCall(addApiKeyPrivilegeRequest, key, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add privilege
     * 
     * @param addApiKeyPrivilegeRequest addApiKeyPrivilegeRequest (required)
     * @param key key (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addApiKeyPrivilege(AddApiKeyPrivilegeRequest addApiKeyPrivilegeRequest, String key) throws ApiException {
        addApiKeyPrivilegeWithHttpInfo(addApiKeyPrivilegeRequest, key);
    }

    /**
     * Add privilege
     * 
     * @param addApiKeyPrivilegeRequest addApiKeyPrivilegeRequest (required)
     * @param key key (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addApiKeyPrivilegeWithHttpInfo(AddApiKeyPrivilegeRequest addApiKeyPrivilegeRequest, String key) throws ApiException {
        com.squareup.okhttp.Call call = addApiKeyPrivilegeValidateBeforeCall(addApiKeyPrivilegeRequest, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add privilege (asynchronously)
     * 
     * @param addApiKeyPrivilegeRequest addApiKeyPrivilegeRequest (required)
     * @param key key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addApiKeyPrivilegeAsync(AddApiKeyPrivilegeRequest addApiKeyPrivilegeRequest, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addApiKeyPrivilegeValidateBeforeCall(addApiKeyPrivilegeRequest, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addApiKeyPrivilegeForId4ns
     * @param id4ns id4ns (required)
     * @param key key (required)
     * @param privilege privilege (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addApiKeyPrivilegeForId4nsCall(ListOfId4ns id4ns, String key, String privilege, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = id4ns;

        // create path and map variables
        String localVarPath = "/api/v1/apikeys/{key}/privileges/{privilege}/id4ns"
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()))
            .replaceAll("\\{" + "privilege" + "\\}", apiClient.escapeString(privilege.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addApiKeyPrivilegeForId4nsValidateBeforeCall(ListOfId4ns id4ns, String key, String privilege, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id4ns' is set
        if (id4ns == null) {
            throw new ApiException("Missing the required parameter 'id4ns' when calling addApiKeyPrivilegeForId4ns(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addApiKeyPrivilegeForId4ns(Async)");
        }
        
        // verify the required parameter 'privilege' is set
        if (privilege == null) {
            throw new ApiException("Missing the required parameter 'privilege' when calling addApiKeyPrivilegeForId4ns(Async)");
        }
        

        com.squareup.okhttp.Call call = addApiKeyPrivilegeForId4nsCall(id4ns, key, privilege, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add ID4ns of a privilege
     * 
     * @param id4ns id4ns (required)
     * @param key key (required)
     * @param privilege privilege (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addApiKeyPrivilegeForId4ns(ListOfId4ns id4ns, String key, String privilege) throws ApiException {
        addApiKeyPrivilegeForId4nsWithHttpInfo(id4ns, key, privilege);
    }

    /**
     * Add ID4ns of a privilege
     * 
     * @param id4ns id4ns (required)
     * @param key key (required)
     * @param privilege privilege (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addApiKeyPrivilegeForId4nsWithHttpInfo(ListOfId4ns id4ns, String key, String privilege) throws ApiException {
        com.squareup.okhttp.Call call = addApiKeyPrivilegeForId4nsValidateBeforeCall(id4ns, key, privilege, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add ID4ns of a privilege (asynchronously)
     * 
     * @param id4ns id4ns (required)
     * @param key key (required)
     * @param privilege privilege (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addApiKeyPrivilegeForId4nsAsync(ListOfId4ns id4ns, String key, String privilege, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addApiKeyPrivilegeForId4nsValidateBeforeCall(id4ns, key, privilege, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createNewApiKey
     * @param creationRequest API key to be created. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNewApiKeyCall(ApiKeyCreationRequest creationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = creationRequest;

        // create path and map variables
        String localVarPath = "/api/v1/apikeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNewApiKeyValidateBeforeCall(ApiKeyCreationRequest creationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'creationRequest' is set
        if (creationRequest == null) {
            throw new ApiException("Missing the required parameter 'creationRequest' when calling createNewApiKey(Async)");
        }
        

        com.squareup.okhttp.Call call = createNewApiKeyCall(creationRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create API key
     * Creation of a new API key.
     * @param creationRequest API key to be created. (required)
     * @return ApiKeyPresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiKeyPresentation createNewApiKey(ApiKeyCreationRequest creationRequest) throws ApiException {
        ApiResponse<ApiKeyPresentation> resp = createNewApiKeyWithHttpInfo(creationRequest);
        return resp.getData();
    }

    /**
     * Create API key
     * Creation of a new API key.
     * @param creationRequest API key to be created. (required)
     * @return ApiResponse&lt;ApiKeyPresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiKeyPresentation> createNewApiKeyWithHttpInfo(ApiKeyCreationRequest creationRequest) throws ApiException {
        com.squareup.okhttp.Call call = createNewApiKeyValidateBeforeCall(creationRequest, null, null);
        Type localVarReturnType = new TypeToken<ApiKeyPresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create API key (asynchronously)
     * Creation of a new API key.
     * @param creationRequest API key to be created. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNewApiKeyAsync(ApiKeyCreationRequest creationRequest, final ApiCallback<ApiKeyPresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNewApiKeyValidateBeforeCall(creationRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiKeyPresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteApiKey
     * @param key The API key to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteApiKeyCall(String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apikeys/{key}"
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteApiKeyValidateBeforeCall(String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteApiKey(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteApiKeyCall(key, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete API key
     * Deletion of an API key.
     * @param key The API key to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteApiKey(String key) throws ApiException {
        deleteApiKeyWithHttpInfo(key);
    }

    /**
     * Delete API key
     * Deletion of an API key.
     * @param key The API key to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteApiKeyWithHttpInfo(String key) throws ApiException {
        com.squareup.okhttp.Call call = deleteApiKeyValidateBeforeCall(key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete API key (asynchronously)
     * Deletion of an API key.
     * @param key The API key to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteApiKeyAsync(String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteApiKeyValidateBeforeCall(key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getApiKey
     * @param key The API key to show. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApiKeyCall(String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apikeys/{key}"
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getApiKeyValidateBeforeCall(String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getApiKey(Async)");
        }
        

        com.squareup.okhttp.Call call = getApiKeyCall(key, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Show API key
     * Showing the details of an API key.
     * @param key The API key to show. (required)
     * @return ApiKeyPresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiKeyPresentation getApiKey(String key) throws ApiException {
        ApiResponse<ApiKeyPresentation> resp = getApiKeyWithHttpInfo(key);
        return resp.getData();
    }

    /**
     * Show API key
     * Showing the details of an API key.
     * @param key The API key to show. (required)
     * @return ApiResponse&lt;ApiKeyPresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiKeyPresentation> getApiKeyWithHttpInfo(String key) throws ApiException {
        com.squareup.okhttp.Call call = getApiKeyValidateBeforeCall(key, null, null);
        Type localVarReturnType = new TypeToken<ApiKeyPresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Show API key (asynchronously)
     * Showing the details of an API key.
     * @param key The API key to show. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApiKeyAsync(String key, final ApiCallback<ApiKeyPresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApiKeyValidateBeforeCall(key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiKeyPresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAllApiKeyPrivileges
     * @param id4nConcerning id4nConcerning (optional)
     * @param limit The maximum count of returned elements (optional)
     * @param offset Start with the n-th element (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAllApiKeyPrivilegesCall(Boolean id4nConcerning, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apikeys/privileges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id4nConcerning != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id4nConcerning", id4nConcerning));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAllApiKeyPrivilegesValidateBeforeCall(Boolean id4nConcerning, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listAllApiKeyPrivilegesCall(id4nConcerning, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all privileges
     * Listing all possible API key privileges.
     * @param id4nConcerning id4nConcerning (optional)
     * @param limit The maximum count of returned elements (optional)
     * @param offset Start with the n-th element (optional)
     * @return ApiKeyPrivilegeInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiKeyPrivilegeInfoResponse listAllApiKeyPrivileges(Boolean id4nConcerning, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ApiKeyPrivilegeInfoResponse> resp = listAllApiKeyPrivilegesWithHttpInfo(id4nConcerning, limit, offset);
        return resp.getData();
    }

    /**
     * List all privileges
     * Listing all possible API key privileges.
     * @param id4nConcerning id4nConcerning (optional)
     * @param limit The maximum count of returned elements (optional)
     * @param offset Start with the n-th element (optional)
     * @return ApiResponse&lt;ApiKeyPrivilegeInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiKeyPrivilegeInfoResponse> listAllApiKeyPrivilegesWithHttpInfo(Boolean id4nConcerning, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = listAllApiKeyPrivilegesValidateBeforeCall(id4nConcerning, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<ApiKeyPrivilegeInfoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all privileges (asynchronously)
     * Listing all possible API key privileges.
     * @param id4nConcerning id4nConcerning (optional)
     * @param limit The maximum count of returned elements (optional)
     * @param offset Start with the n-th element (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAllApiKeyPrivilegesAsync(Boolean id4nConcerning, Integer limit, Integer offset, final ApiCallback<ApiKeyPrivilegeInfoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAllApiKeyPrivilegesValidateBeforeCall(id4nConcerning, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiKeyPrivilegeInfoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAllApiKeysOfOrganization
     * @param limit The maximum count of returned elements (optional)
     * @param offset Start with the n-th element (optional)
     * @param organizationId The namespace of the organization to search in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAllApiKeysOfOrganizationCall(Integer limit, Integer offset, String organizationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apikeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (organizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("organizationId", organizationId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAllApiKeysOfOrganizationValidateBeforeCall(Integer limit, Integer offset, String organizationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listAllApiKeysOfOrganizationCall(limit, offset, organizationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Find API key by organization
     * Finding all API key assigned to the specified organization in a paginated manner.
     * @param limit The maximum count of returned elements (optional)
     * @param offset Start with the n-th element (optional)
     * @param organizationId The namespace of the organization to search in. (optional)
     * @return PaginatedApiKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedApiKeyResponse listAllApiKeysOfOrganization(Integer limit, Integer offset, String organizationId) throws ApiException {
        ApiResponse<PaginatedApiKeyResponse> resp = listAllApiKeysOfOrganizationWithHttpInfo(limit, offset, organizationId);
        return resp.getData();
    }

    /**
     * Find API key by organization
     * Finding all API key assigned to the specified organization in a paginated manner.
     * @param limit The maximum count of returned elements (optional)
     * @param offset Start with the n-th element (optional)
     * @param organizationId The namespace of the organization to search in. (optional)
     * @return ApiResponse&lt;PaginatedApiKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedApiKeyResponse> listAllApiKeysOfOrganizationWithHttpInfo(Integer limit, Integer offset, String organizationId) throws ApiException {
        com.squareup.okhttp.Call call = listAllApiKeysOfOrganizationValidateBeforeCall(limit, offset, organizationId, null, null);
        Type localVarReturnType = new TypeToken<PaginatedApiKeyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find API key by organization (asynchronously)
     * Finding all API key assigned to the specified organization in a paginated manner.
     * @param limit The maximum count of returned elements (optional)
     * @param offset Start with the n-th element (optional)
     * @param organizationId The namespace of the organization to search in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAllApiKeysOfOrganizationAsync(Integer limit, Integer offset, String organizationId, final ApiCallback<PaginatedApiKeyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAllApiKeysOfOrganizationValidateBeforeCall(limit, offset, organizationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedApiKeyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listApiKeyPrivileges
     * @param key key (required)
     * @param limit The maximum count of returned elements (optional)
     * @param offset Start with the n-th element (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listApiKeyPrivilegesCall(String key, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apikeys/{key}/privileges"
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listApiKeyPrivilegesValidateBeforeCall(String key, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling listApiKeyPrivileges(Async)");
        }
        

        com.squareup.okhttp.Call call = listApiKeyPrivilegesCall(key, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List privileges
     * 
     * @param key key (required)
     * @param limit The maximum count of returned elements (optional)
     * @param offset Start with the n-th element (optional)
     * @return ApiKeyPrivilegePaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiKeyPrivilegePaginatedResponse listApiKeyPrivileges(String key, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ApiKeyPrivilegePaginatedResponse> resp = listApiKeyPrivilegesWithHttpInfo(key, limit, offset);
        return resp.getData();
    }

    /**
     * List privileges
     * 
     * @param key key (required)
     * @param limit The maximum count of returned elements (optional)
     * @param offset Start with the n-th element (optional)
     * @return ApiResponse&lt;ApiKeyPrivilegePaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiKeyPrivilegePaginatedResponse> listApiKeyPrivilegesWithHttpInfo(String key, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = listApiKeyPrivilegesValidateBeforeCall(key, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<ApiKeyPrivilegePaginatedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List privileges (asynchronously)
     * 
     * @param key key (required)
     * @param limit The maximum count of returned elements (optional)
     * @param offset Start with the n-th element (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listApiKeyPrivilegesAsync(String key, Integer limit, Integer offset, final ApiCallback<ApiKeyPrivilegePaginatedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listApiKeyPrivilegesValidateBeforeCall(key, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiKeyPrivilegePaginatedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listId4ns
     * @param key key (required)
     * @param privilege privilege (required)
     * @param limit The maximum count of returned elements (optional)
     * @param offset Start with the n-th element (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listId4nsCall(String key, String privilege, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/apikeys/{key}/privileges/{privilege}/id4ns"
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()))
            .replaceAll("\\{" + "privilege" + "\\}", apiClient.escapeString(privilege.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listId4nsValidateBeforeCall(String key, String privilege, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling listId4ns(Async)");
        }
        
        // verify the required parameter 'privilege' is set
        if (privilege == null) {
            throw new ApiException("Missing the required parameter 'privilege' when calling listId4ns(Async)");
        }
        

        com.squareup.okhttp.Call call = listId4nsCall(key, privilege, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * ID4ns of a privilege
     * Listing ID4ns of a id4n concerning privilege
     * @param key key (required)
     * @param privilege privilege (required)
     * @param limit The maximum count of returned elements (optional)
     * @param offset Start with the n-th element (optional)
     * @return Id4nPresentationPaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Id4nPresentationPaginatedResponse listId4ns(String key, String privilege, Integer limit, Integer offset) throws ApiException {
        ApiResponse<Id4nPresentationPaginatedResponse> resp = listId4nsWithHttpInfo(key, privilege, limit, offset);
        return resp.getData();
    }

    /**
     * ID4ns of a privilege
     * Listing ID4ns of a id4n concerning privilege
     * @param key key (required)
     * @param privilege privilege (required)
     * @param limit The maximum count of returned elements (optional)
     * @param offset Start with the n-th element (optional)
     * @return ApiResponse&lt;Id4nPresentationPaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Id4nPresentationPaginatedResponse> listId4nsWithHttpInfo(String key, String privilege, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = listId4nsValidateBeforeCall(key, privilege, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<Id4nPresentationPaginatedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * ID4ns of a privilege (asynchronously)
     * Listing ID4ns of a id4n concerning privilege
     * @param key key (required)
     * @param privilege privilege (required)
     * @param limit The maximum count of returned elements (optional)
     * @param offset Start with the n-th element (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listId4nsAsync(String key, String privilege, Integer limit, Integer offset, final ApiCallback<Id4nPresentationPaginatedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listId4nsValidateBeforeCall(key, privilege, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Id4nPresentationPaginatedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeApiKeyPrivilege
     * @param key key (required)
     * @param removeApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeApiKeyPrivilegeCall(String key, RemoveApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = removeApiKeyPrivilegeRequest;

        // create path and map variables
        String localVarPath = "/api/v1/apikeys/{key}/privileges"
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeApiKeyPrivilegeValidateBeforeCall(String key, RemoveApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling removeApiKeyPrivilege(Async)");
        }
        
        // verify the required parameter 'removeApiKeyPrivilegeRequest' is set
        if (removeApiKeyPrivilegeRequest == null) {
            throw new ApiException("Missing the required parameter 'removeApiKeyPrivilegeRequest' when calling removeApiKeyPrivilege(Async)");
        }
        

        com.squareup.okhttp.Call call = removeApiKeyPrivilegeCall(key, removeApiKeyPrivilegeRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove privilege
     * 
     * @param key key (required)
     * @param removeApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeApiKeyPrivilege(String key, RemoveApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest) throws ApiException {
        removeApiKeyPrivilegeWithHttpInfo(key, removeApiKeyPrivilegeRequest);
    }

    /**
     * Remove privilege
     * 
     * @param key key (required)
     * @param removeApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeApiKeyPrivilegeWithHttpInfo(String key, RemoveApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest) throws ApiException {
        com.squareup.okhttp.Call call = removeApiKeyPrivilegeValidateBeforeCall(key, removeApiKeyPrivilegeRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove privilege (asynchronously)
     * 
     * @param key key (required)
     * @param removeApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeApiKeyPrivilegeAsync(String key, RemoveApiKeyPrivilegeRequest removeApiKeyPrivilegeRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeApiKeyPrivilegeValidateBeforeCall(key, removeApiKeyPrivilegeRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for removeApiKeyPrivilegeForId4ns
     * @param id4ns id4ns (required)
     * @param key key (required)
     * @param privilege privilege (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeApiKeyPrivilegeForId4nsCall(ListOfId4ns id4ns, String key, String privilege, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = id4ns;

        // create path and map variables
        String localVarPath = "/api/v1/apikeys/{key}/privileges/{privilege}/id4ns"
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()))
            .replaceAll("\\{" + "privilege" + "\\}", apiClient.escapeString(privilege.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeApiKeyPrivilegeForId4nsValidateBeforeCall(ListOfId4ns id4ns, String key, String privilege, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id4ns' is set
        if (id4ns == null) {
            throw new ApiException("Missing the required parameter 'id4ns' when calling removeApiKeyPrivilegeForId4ns(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling removeApiKeyPrivilegeForId4ns(Async)");
        }
        
        // verify the required parameter 'privilege' is set
        if (privilege == null) {
            throw new ApiException("Missing the required parameter 'privilege' when calling removeApiKeyPrivilegeForId4ns(Async)");
        }
        

        com.squareup.okhttp.Call call = removeApiKeyPrivilegeForId4nsCall(id4ns, key, privilege, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove id4ns of a privilege
     * 
     * @param id4ns id4ns (required)
     * @param key key (required)
     * @param privilege privilege (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeApiKeyPrivilegeForId4ns(ListOfId4ns id4ns, String key, String privilege) throws ApiException {
        removeApiKeyPrivilegeForId4nsWithHttpInfo(id4ns, key, privilege);
    }

    /**
     * Remove id4ns of a privilege
     * 
     * @param id4ns id4ns (required)
     * @param key key (required)
     * @param privilege privilege (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeApiKeyPrivilegeForId4nsWithHttpInfo(ListOfId4ns id4ns, String key, String privilege) throws ApiException {
        com.squareup.okhttp.Call call = removeApiKeyPrivilegeForId4nsValidateBeforeCall(id4ns, key, privilege, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove id4ns of a privilege (asynchronously)
     * 
     * @param id4ns id4ns (required)
     * @param key key (required)
     * @param privilege privilege (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeApiKeyPrivilegeForId4nsAsync(ListOfId4ns id4ns, String key, String privilege, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeApiKeyPrivilegeForId4nsValidateBeforeCall(id4ns, key, privilege, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateApiKey
     * @param apiKeyChange The new values to apply. (required)
     * @param key The API key to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateApiKeyCall(ApiKeyChangeRequest apiKeyChange, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = apiKeyChange;

        // create path and map variables
        String localVarPath = "/api/v1/apikeys/{key}"
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateApiKeyValidateBeforeCall(ApiKeyChangeRequest apiKeyChange, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKeyChange' is set
        if (apiKeyChange == null) {
            throw new ApiException("Missing the required parameter 'apiKeyChange' when calling updateApiKey(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateApiKey(Async)");
        }
        

        com.squareup.okhttp.Call call = updateApiKeyCall(apiKeyChange, key, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update API keys
     * API keys can be updated with new labels, and be activated and deactivated. The secret or UUID cannot be changed.
     * @param apiKeyChange The new values to apply. (required)
     * @param key The API key to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateApiKey(ApiKeyChangeRequest apiKeyChange, String key) throws ApiException {
        updateApiKeyWithHttpInfo(apiKeyChange, key);
    }

    /**
     * Update API keys
     * API keys can be updated with new labels, and be activated and deactivated. The secret or UUID cannot be changed.
     * @param apiKeyChange The new values to apply. (required)
     * @param key The API key to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateApiKeyWithHttpInfo(ApiKeyChangeRequest apiKeyChange, String key) throws ApiException {
        com.squareup.okhttp.Call call = updateApiKeyValidateBeforeCall(apiKeyChange, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update API keys (asynchronously)
     * API keys can be updated with new labels, and be activated and deactivated. The secret or UUID cannot be changed.
     * @param apiKeyChange The new values to apply. (required)
     * @param key The API key to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateApiKeyAsync(ApiKeyChangeRequest apiKeyChange, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateApiKeyValidateBeforeCall(apiKeyChange, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
